# ==========================================================
# Shared Tasks
# ==========================================================
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch
      default: master
    - name: directory-name
      description: directory name to git clone the project
      default: kfp-tekton
    - name: archive-dir
      description: archive directory
      default: "."
  results:
    - name: git-repository
      description: The cloned repository
    - name: git-branch
      description: The active branch for the repository
    - name: git-commit
      description: The current commit id that was cloned
    - name: git-commit-short
      description: The current commit id that was cloned in short form
    - name: image-tag
      description: a temp image tag for current pipeline run
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: git-clone-repo
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: GIT_URL
          value: $(params.repository)
        - name: GIT_BRANCH
          value: $(params.branch)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts && git clone -q -b $GIT_BRANCH $GIT_URL $(params.directory-name);
          cd $(params.directory-name);
          GIT_COMMIT=$(git rev-parse HEAD);
          GIT_COMMIT_SHORT=$(git log -n1 --format=format:"%h");
          echo -n "${GIT_URL}" > $(results.git-repository.path);
          echo -n "${GIT_BRANCH}" > $(results.git-branch.path);
          echo -n "${GIT_COMMIT}" > $(results.git-commit.path);
          echo -n "${GIT_COMMIT_SHORT}" > $(results.git-commit-short.path);
          echo -n "${BUILD_NUMBER}-${GIT_COMMIT_SHORT}" > $(results.image-tag.path);
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-binaries
spec:
  params:
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: build-dir
      description: directory with makefile
      default: tekton-catalog/feature
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: build-binaries
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: BUILD_DIR
          value: $(params.build-dir)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/build-binaries.sh;
---
# Stolen and modified from https://github.com/open-toolchain/tekton-catalog/blob/master/container-registry/task-execute-in-dind.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-images-to-dockerhub
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: 'https://cloud.ibm.com'
    - name: continuous-delivery-context-secret
      description: >-
        name of the configmap containing the continuous delivery pipeline
        context secrets
      default: secure-properties
    - name: kubernetes-service-apikey-secret-key
      description: >-
        field in the secret that contains the api key used to login to
        ibmcloud kubernetes service
      default: apikey
    - name: dockerhub-token-secret-key
      description: >-
        field in the secret that contains the api key used to login to
        ibmcloud kubernetes service
      default: dockerhub-token
    - name: cluster-region
      description: >
        the ibmcloud region hosting the cluster
      default: 'us-south'
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: "default"
    - name: cluster-name
      description: >-
        name of the cluster
      default: 'iks-cluster'
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: dockerhub-username
      description: Dockerhub username
      default: ''
    - name: dockerhub-config-dir
      description: Directory to store docker's config.json in
      default: /steps
    - name: docker-registry-secret-name
      description: Name of docker-registry secret
      default: registry-dockerconfig-secret
    - name: docker-registry
      description: Image registry
      default: docker.io     
    - name: docker-namespace
      description: Image namespace
      default: ''
    - name: image-tag
      description: Image tag
      default: ''
    - name: publish-script
      description: Script to build/tag/publish/... image
      default: run.sh
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: create-docker-registry-secret
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBM_CLOUD_REGION
          value: $(params.cluster-region)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: CLUSTER_NAME
          value: $(params.cluster-name)
        - name: DOCKERHUB_USERNAME
          value: $(params.dockerhub-username)
        - name: DOCKERHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.dockerhub-token-secret-key)
        - name: DOCKER_CONFIG_DIR
          value: $(params.dockerhub-config-dir)
        - name: SECRET_NAME
          value: $(params.docker-registry-secret-name)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/iks-authenticate.sh;
          source scripts/deploy/iks/tekton-catalog/create-dockerconfig-secret.sh;
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
    - name: run-docker-commands
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
        - name: DOCKER_REGISTRY
          value: $(params.docker-registry)
        - name: DOCKER_NAMESPACE
          value: $(params.docker-namespace)
        - name: IMAGE_TAG
          value: $(params.image-tag)
      command:
        - "/bin/bash"
        - "-c"
      args:
        - |
          cd artifacts/$(params.directory-name);
          source $(params.publish-script)
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
        - mountPath: /certs/client
          name: dind-certs
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then 
            apk add e2fsprogs && 
            truncate -s 20G /tmp/disk.img && 
            mkfs.ext4 /tmp/disk.img && 
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
# ==========================================================
# Final Tasks
# ==========================================================
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: 'https://cloud.ibm.com'
    - name: continuous-delivery-context-secret
      description: >-
        name of the configmap containing the continuous delivery pipeline
        context secrets
      default: secure-properties
    - name: kubernetes-service-apikey-secret-key
      description: >-
        field in the secret that contains the api key used to login to
        ibmcloud kubernetes service
      default: apikey
    - name: cluster-region
      description: >
        the ibmcloud region hosting the cluster
      default: 'us-south'
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: "default"
    - name: cluster-name
      description: >-
        name of the cluster
      default: 'iks-cluster'
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: org
      description: organization
    - name: space
      description: space
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: cleanup
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: IBM_CLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBM_CLOUD_REGION
          value: $(params.cluster-region)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: CLUSTER_NAME
          value: $(params.cluster-name)
        - name: REGION
          value: $(params.cluster-region)
        - name: ORG
          value: $(params.org)
        - name: SPACE
          value: $(params.space)
        - name: RESOURCE_GROUP
          value: $(params.resource-group)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd /artifacts && source build.properties;
          cd $(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/iks-authenticate.sh;
          source scripts/deploy/iks/tekton-catalog/cleanup.sh;
          source scripts/deploy/iks/undeploy-tekton.sh;
# ==========================================================
# Pipeline Loops Tasks
# ==========================================================
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: setup-pipeline-loops-deploy
spec:
  params:
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: controller-image-url
      description: Controller image url of form registry/repository/image
      default: us.icr.io/kfp-tekton/pipelineloop-controller
    - name: webhook-image-url
      description: Webhook image url of form registry/repository/image
      default: us.icr.io/kfp-tekton/pipelineloop-webhook
    - name: image-tag
      description: Image tag SHARED by controller and webhook
      default: nightly
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: setup-deploy
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: CONTROLLER_IMAGE_URL
          value: $(params.controller-image-url)
        - name: WEBHOOK_IMAGE_URL
          value: $(params.webhook-image-url)
        - name: IMAGE_TAG
          value: $(params.image-tag)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/setup-pipeline-loops-deploy.sh;
# ==========================================================
# Kubectl Wrapper Tasks
# ==========================================================
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: setup-kubectl-wrapper-deploy
spec:
  params:
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: kubectl-wrapper-image-url
      description: Kubectl wrapper image url of form registry/repository/image
      default: us.icr.io/kfp-tekton/kubeclient
    - name: image-tag
      description: Image tag of kubectl-wrapper image
      default: nightly
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: setup-deploy
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: KUBECTL_WRAPPER_IMAGE_URL
          value: $(params.kubectl-wrapper-image-url)
        - name: IMAGE_TAG
          value: $(params.image-tag)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/setup-kubectl-wrapper-deploy.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-tekton
spec:
  params:
    - name: directory-name
      description: Directory to clone repository into
      default: kfp-tekton
    - name: apikey
      description: the ibmcloud api key
    - name: kubernetes-cluster
      description: cluster name
    - name: tekton-version
      description: tekton version
    - name: tekton-ns
      description: tekton namespace
      default: tekton-pipeline
    - name: docker-username
      description: for ibm container registry
      default: iamapikey
    - name: docker-password
      description: iam api key
    - name: archive-dir
      description: archive directory
      default: "."
    - name: region
      description: region
    - name: org
      description: organization
    - name: space
      description: space
    - name: resource-group
      description: resource group
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: deploy-tekton
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: DOCKER_USERNAME
          value: $(params.docker-username)
        - name: DOCKER_PASSWORD
          value: $(params.docker-password)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.kubernetes-cluster)
        - name: TEKTON_VERSION
          value: $(params.tekton-version)
        - name: TEKTON_NS
          value: $(params.tekton-ns)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: REGION
          value: $(params.region)
        - name: ORG
          value: $(params.org)
        - name: SPACE
          value: $(params.space)
        - name: RESOURCE_GROUP
          value: $(params.resource-group)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -ex;
          cd /artifacts/$(params.directory-name);
          source ./scripts/deploy/iks/deploy-tekton.sh;
          retry 3 3 kubectl patch cm feature-flags -n "$(params.tekton-ns)" -p '{"data":{"disable-home-env-overwrite":"true","disable-working-directory-overwrite":"true", "enable-custom-tasks": "true"}}';
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-images-dnd
spec:
  params:
    - name: apikey
      description: the ibmcloud api key
    - name: image-name
      description: image name
    - name: docker-root
      description: root directory for docker
      default: .
    - name: docker-file
      description: dockerfile
    - name: registry-url
      description: container registry url
    - name: registry-namespace
      description: the ibmcloud registry namespace
    - name: docker-username
      description: for ibm container registry
      default: iamapikey
    - name: docker-password
      description: iam api key
    - name: run-task
      description: "execution task: artifact or image"
    - name: archive-dir
      description: archive directory
      default: "."
    - name: build-args
      description: docker build args
      default: ""
    - name: image-tag
      description: image tag
    - name: directory-name
      description: directory
      default: "kfp-tekton"
    - name: region
      description: region
    - name: org
      description: organization
    - name: space
      description: space
    - name: resource-group
      description: resource group
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: build-image
      image: docker.io/aipipeline/pipeline-base-image:1.2
      env:
        - name: DOCKER_USERNAME
          value: $(params.docker-username)
        - name: DOCKER_PASSWORD
          value: $(params.docker-password)
        - name: IBM_CLOUD_API_KEY
          value: $(params.apikey)
        - name: IMAGE_NAME
          value: $(params.image-name)
        - name: DOCKER_ROOT
          value: $(params.docker-root)
        - name: DOCKER_FILE
          value: $(params.docker-file)
        - name: REGISTRY_URL
          value: $(params.registry-url)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: RUN_TASK
          value: $(params.run-task)
        - name: ARCHIVE_DIR
          value: $(params.archive-dir)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: IMAGAE_TAG
          value: $(params.image-tag)
        - name: REGION
          value: $(params.region)
        - name: ORG
          value: $(params.org)
        - name: SPACE
          value: $(params.space)
        - name: RESOURCE_GROUP
          value: $(params.resource-group)
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
      command: ["/bin/bash", "-c"]
      args:
        - set -ex;
          cd /artifacts/$(params.directory-name);
          export BUILD_ARG_LIST="$(params.build-args)";
          source scripts/deploy/iks/build-image-dind.sh;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
  sidecars:
    - image: icr.io/continuous-delivery/pipeline/docker:19.03.15-dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then
            apk add e2fsprogs &&
            truncate -s 20G /tmp/disk.img &&
            mkfs.ext4 /tmp/disk.img &&
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: dind-certs
      emptyDir: {}
# ==========================================================
# Imported Tasks - https://github.com/open-toolchain/tekton-catalog
# ==========================================================
# git-clone
# icr-containerize
# iks-deploy-to-kubernetes
